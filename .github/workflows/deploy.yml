name: Jeonse-ive CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Git checkout
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Create .env file from GitHub Secrets
      - name: Create env files
        run: |
          mkdir -p env
          echo "${{ secrets.ENV_VARS }}" > env/prod.env
          echo "✅ [LOCAL] env/prod.env 생성 완료"

      # 2-1. Verify .env file locally
      - name: Verify .env file exists and is valid
        run: |
          echo "[DEBUG] 파일 정보"
          ls -l env/ || echo "❌ 디렉터리 없음"
          file env/prod.env || echo "❌ file 명령 실패"
          echo "[DEBUG] 내용 미리보기"
          cat env/prod.env || echo "❌ 파일 읽기 실패"

      # 3. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4. Grant permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Build with Gradle (excluding tests)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 6. Docker build
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest .

      # 7. DockerHub login
      - name: DockerHub Login
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 8. Push Docker Image
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest

      # 9. Create EC2 app directory
      - name: SSH to EC2 - Create app directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: mkdir -p /home/${{ secrets.SERVER_USERNAME }}/app

      # 10. Copy docker-compose file
      - name: Copy docker-compose.prod.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/home/${{ secrets.SERVER_USERNAME }}/app"

      # ✅ 11. Manually copy .env file with scp (and check if it exists before)
      - name: Copy .env file using scp manually
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem

          if [ ! -f env/prod.env ]; then
            echo "❌ env/prod.env 파일이 존재하지 않습니다. 종료합니다."
            exit 1
          fi

          echo "📦 .env 파일 내용:"
          cat env/prod.env

          echo "📡 .env 파일을 EC2로 복사합니다..."
          scp -i key.pem -o StrictHostKeyChecking=no env/prod.env ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USERNAME }}/app/.env
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      # ✅ 12. EC2에서 .env 상태 디버깅
      - name: Debug .env file on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USERNAME }}/app
            echo "[EC2] .env 파일 상태 확인:"
            if [ -f ".env" ]; then
              echo "✅ .env는 정상 파일입니다."
              ls -l .env
              file .env
              echo "[내용 미리보기]"
              cat .env
            elif [ -d ".env" ]; then
              echo "❌ .env가 디렉터리입니다. 문제 발생"
              ls -ld .env
            else
              echo "❌ .env가 존재하지 않습니다."
            fi

      # ✅ 13. Docker Compose Deploy
      - name: Deploy on EC2 with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USERNAME }}/app

            echo "[EC2] DockerHub 로그인 시도 중..."
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "[EC2] docker-compose.prod.yml 및 .env 위치 확인:"
            ls -l

            echo "[EC2] Docker Compose 배포 시작"
            docker compose -f docker-compose.prod.yml down || true
            docker image prune -a -f
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest
            docker compose -f docker-compose.prod.yml up -d

      # ✅ 14. Verify containers
      - name: Show running containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: docker ps
